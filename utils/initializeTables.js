const bcrypt = require("bcryptjs");
const db = require("../connection");

module.exports = async () => {
  let salt = await bcrypt.genSalt(15);

  let hashedAdminPass = await bcrypt.hash("administrador", salt);
  let hashedTechnicianPass = await bcrypt.hash("tecnico", salt);
  let hashedUserPass = await bcrypt.hash("usuario", salt);

  let query = `

    DROP TABLE IF EXISTS users cascade;
    DROP TABLE IF EXISTS technicians cascade;
    DROP TABLE IF EXISTS components cascade;
    DROP TABLE IF EXISTS devices cascade;
    DROP TABLE IF EXISTS errors cascade;
    DROP TABLE IF EXISTS incidence_types cascade;
    DROP TABLE IF EXISTS device_types cascade;
    DROP TABLE IF EXISTS incidences cascade;
    DROP TABLE IF EXISTS incidence_errors cascade;
    DROP TABLE IF EXISTS device_components cascade;
    DROP TABLE IF EXISTS device_incidences cascade;
    DROP TABLE IF EXISTS error_components cascade;
    DROP TABLE IF EXISTS technician_incidences cascade;

    CREATE TABLE "users" (
      "id" int4 GENERATED BY DEFAULT AS IDENTITY,
      "first_name" varchar(255) NOT NULL,
      "last_name" varchar(255) NOT NULL,
      "dni" varchar(255) NOT NULL,
      "email" varchar(255) NOT NULL,
      "birth_date" date NOT NULL,
      "role" int8 NOT NULL,
      "password" varchar(500) NOT NULL,
      "profile_picture" varchar(400),
      "profile_picture_id" varchar(400),
      "sex" varchar(1) NOT NULL,
      CONSTRAINT "_copy_1" PRIMARY KEY ("id")
    );

    CREATE TABLE "components" (
      "id" int4 GENERATED BY DEFAULT AS IDENTITY,
      "name" varchar(255) NOT NULL,
      "picture" varchar(400),
      "picture_id" varchar(400),
      "description" varchar(400) NOT NULL,
      CONSTRAINT "_copy_2" PRIMARY KEY ("id")
    );
      
    CREATE TABLE "technicians" (
      "id" int4 GENERATED BY DEFAULT AS IDENTITY,
      "user_id" int4 NOT NULL,
      CONSTRAINT "_copy_3" PRIMARY KEY ("id")
    );

    CREATE TABLE "errors" (
      "id" int4 GENERATED BY DEFAULT AS IDENTITY,
      "description" varchar(255) NOT NULL,
      CONSTRAINT "_copy_4" PRIMARY KEY ("id")
    );

    CREATE TABLE "incidences" (
      "id" int4 GENERATED BY DEFAULT AS IDENTITY,
      "description" varchar(255) NOT NULL,
      "user_id" int4 NOT NULL,
      "device_id" int4 NOT NULL,
      "location" varchar(400) NOT NULL,
      "priority" int4 NOT NULL,
      "status" varchar(60) NOT NULL,
      "date" date NOT NULL,
      "end_date" date,
      "incidence_type" varchar(400),
      CONSTRAINT "_copy_5" PRIMARY KEY ("id")
    );

    CREATE TABLE "devices" (
      "id" int4 GENERATED BY DEFAULT AS IDENTITY,
      "serial" varchar(255) NOT NULL,
      "device_type_id" int4 NOT NULL,
      CONSTRAINT "_copy_6" PRIMARY KEY ("id")
    );

    CREATE TABLE "device_types" (
      "id" int4 GENERATED BY DEFAULT AS IDENTITY,
      "name" varchar(255) NOT NULL,
      CONSTRAINT "_copy_7" PRIMARY KEY ("id")
    );

    CREATE TABLE "incidence_errors" (
      "id" int4 GENERATED BY DEFAULT AS IDENTITY,
      "error_id" int4 NOT NULL,
      "incidence_id" int4 NOT NULL,
      CONSTRAINT "_copy_8" PRIMARY KEY ("id")
    );

    CREATE TABLE "error_components" (
      "id" int4 GENERATED BY DEFAULT AS IDENTITY,
      "error_id" int4 NOT NULL,
      "component_id" int4 NOT NULL,
      CONSTRAINT "_copy_9" PRIMARY KEY ("id")
    );

    CREATE TABLE "technician_incidences" (
      "id" int4 GENERATED BY DEFAULT AS IDENTITY,
      "incidence_id" int4 NOT NULL,
      "technician_id" int4 NOT NULL,
      CONSTRAINT "_copy_10" PRIMARY KEY ("id")
    );
    
    CREATE TABLE "device_components" (
      "id" int4 GENERATED BY DEFAULT AS IDENTITY,
      "component_id" int4 NOT NULL,
      "device_id" int4 NOT NULL,
      CONSTRAINT "_copy_11" PRIMARY KEY ("id")
    );



    --device-components
    ALTER TABLE "device_components" ADD CONSTRAINT "device_components_device_id" FOREIGN KEY ("device_id") REFERENCES "devices" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

    ALTER TABLE "device_components" ADD CONSTRAINT "device_components_component_id" FOREIGN KEY ("component_id") REFERENCES "components" ("id") ON DELETE CASCADE ON UPDATE CASCADE;


    --device type
    ALTER TABLE "devices" ADD CONSTRAINT "device_type_id" FOREIGN KEY ("device_type_id") REFERENCES "device_types" ("id") ON DELETE CASCADE ON UPDATE CASCADE;


    --error-component
    ALTER TABLE "error_components" ADD CONSTRAINT "error_components_incident_id" FOREIGN KEY ("error_id") REFERENCES "errors" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

    ALTER TABLE "error_components" ADD CONSTRAINT "error_components_component_id" FOREIGN KEY ("component_id") REFERENCES "components" ("id") ON DELETE CASCADE ON UPDATE CASCADE;


    --incidence-error
    ALTER TABLE "incidence_errors" ADD CONSTRAINT "incidence_errors_error_id" FOREIGN KEY ("error_id") REFERENCES "errors" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

    ALTER TABLE "incidence_errors" ADD CONSTRAINT "incidence_errors_incidence_id" FOREIGN KEY ("incidence_id") REFERENCES "incidences" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

    --incidence-user
    ALTER TABLE "incidences" ADD CONSTRAINT "incidences_user_id" FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

    --incidence-device
    ALTER TABLE "incidences" ADD CONSTRAINT "incidences_device_id" FOREIGN KEY ("device_id") REFERENCES "devices" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

    --technician-incidences
    ALTER TABLE "technician_incidences" ADD CONSTRAINT "technician_incidences_incidence_id" FOREIGN KEY ("incidence_id") REFERENCES "incidences" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

    ALTER TABLE "technician_incidences" ADD CONSTRAINT "technician_incidences_technician_id" FOREIGN KEY ("technician_id") REFERENCES "technicians" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
    

    --technician user-Id
    ALTER TABLE "technicians" ADD CONSTRAINT "technician_user_id" FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

    --insert users

    INSERT INTO users (first_name, last_name, email, password, sex, dni, role, birth_date) VALUES ('administrador', 'administrador', 'administrador@admin.com', '${hashedAdminPass}', 'F', '11111111111', '60', '1995-12-17T03:24:00');

    INSERT INTO users (first_name, last_name, email, password, sex, dni, role, birth_date) VALUES ('tecnico', 'tecnico', 'tecnico@tecnico.com', '${hashedTechnicianPass}', 'F', '11111111111', '55', '1995-12-17T03:24:00');
    
    INSERT INTO users (first_name, last_name, email, password, sex, dni, role, birth_date) VALUES ('usuario', 'usuario', 'usuario@usuario.com', '${hashedUserPass}', 'F', '11111111111', '50', '1995-12-17T03:24:00');
  `;
  return new Promise((resolve, reject) => {
    db.query(query, (error) => {
      if (error) reject(error);
      else {
        console.log("tables initialized =::::::");
        resolve(true);
      }
    });
  });
};
